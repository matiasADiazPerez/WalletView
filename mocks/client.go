// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "walletview/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetTokenBallance provides a mock function with given fields: ctx, params
func (_m *Client) GetTokenBallance(ctx context.Context, params models.WalletParams) ([]models.TokenBalance, models.ErrorWrapper) {
	ret := _m.Called(ctx, params)

	var r0 []models.TokenBalance
	var r1 models.ErrorWrapper
	if rf, ok := ret.Get(0).(func(context.Context, models.WalletParams) ([]models.TokenBalance, models.ErrorWrapper)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WalletParams) []models.TokenBalance); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TokenBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WalletParams) models.ErrorWrapper); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(models.ErrorWrapper)
	}

	return r0, r1
}

// GetTokenPrice provides a mock function with given fields: ctx, params
func (_m *Client) GetTokenPrice(ctx context.Context, params models.TokenPriceParams) (string, models.ErrorWrapper) {
	ret := _m.Called(ctx, params)

	var r0 string
	var r1 models.ErrorWrapper
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenPriceParams) (string, models.ErrorWrapper)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenPriceParams) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TokenPriceParams) models.ErrorWrapper); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(models.ErrorWrapper)
	}

	return r0, r1
}

// GetTokensSymbols provides a mock function with given fields:
func (_m *Client) GetTokensSymbols() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
